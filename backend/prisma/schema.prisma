// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  password     String
  email        String    @unique
  admin        Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  refreshToken String?   @unique
  lists        List[]
}

model List {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  entities    ListEntity[]
}

model ListEntity {
  id            Int           @id @default(autoincrement())
  list          List          @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId        Int
  pokemon       Pokemon?      @relation(fields: [pokemonId], references: [id])
  pokemonId     Int?
  forms         PokemonForm[]
  pokemonGender Boolean?
  formGender    Boolean?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
}

model Pokemon {
  id                 Int           @id @default(autoincrement())
  name               String
  species            String
  gender             Boolean
  nationalNumber     Int           @unique
  firstType          PokemonType   @relation(fields: [firstTypeId], references: [id], name: "first")
  firstTypeId        Int
  secondType         PokemonType?  @relation(fields: [secondTypeId], references: [id], name: "second")
  secondTypeId       Int?
  generation         Int
  health             Int
  speed              Int
  attack             Int
  defence            Int
  specialAttack      Int
  specialDefence     Int
  artworkSprite      String?
  artworkSpriteShiny String?
  homeMale           String?
  homeFemale         String?
  homeMaleShiny      String?
  homeFemaleShiny    String?
  nextEvolution      String?
  previousEvolution  String?
  forms              PokemonForm[]
  games              Game[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime?     @updatedAt
  listEntities       ListEntity[]
}

model PokemonForm {
  id                 Int          @id @default(autoincrement())
  pokemon            Pokemon      @relation(fields: [pokemonId], references: [id])
  pokemonId          Int
  name               String
  formType           FormType?    @relation(fields: [formTypeId], references: [id])
  formTypeId         Int
  species            String?
  gender             Boolean?
  firstType          PokemonType?  @relation(fields: [firstTypeId], references: [id], name: "formFirst")
  firstTypeId        Int
  secondType         PokemonType? @relation(fields: [secondTypeId], references: [id], name: "formSecond")
  secondTypeId       Int?
  generation         Int?
  health             Int?
  speed              Int?
  attack             Int?
  defence            Int?
  specialAttack      Int?
  specialDefence     Int?
  artworkSprite      String?
  artworkSpriteShiny String?
  homeMale           String?
  homeFemale         String?
  homeMaleShiny      String?
  homeFemaleShiny    String?
  games              Game[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime?    @updatedAt
  listEntities       ListEntity[]
}

model Game {
  id      Int           @id @default(autoincrement())
  name    String        @unique
  pokemon Pokemon[]
  forms   PokemonForm[]
}

model FormType {
  id    Int           @id @default(autoincrement())
  name  String        @unique
  forms PokemonForm[]
}

model PokemonType {
  id                Int           @id @default(autoincrement())
  name              String        @unique
  doubleTo          String?
  doubleFrom        String?
  halfTo            String?
  halfFrom          String?
  immuneTo          String?
  immuneFrom        String?
  firstSlotPokemon  Pokemon[]     @relation("first")
  secondSlotPokemon Pokemon[]     @relation("second")
  firstSlotForm     PokemonForm[] @relation("formFirst")
  secondSlotForm    PokemonForm[] @relation("formSecond")
}
